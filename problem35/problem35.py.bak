import threading
from itertools import permutations

def memoization(F):
	cache = dict()
	def wrapper(*args):
		if args not in cache:
			cache[args] = F(*args)
		return cache[args]
	return wrapper

@memoization
def isprime(n):
	if n==2: return True
	if not n%2: return False
	for d in range(3, n//2+1, 2):
		if not n%d: return False
	return True

def check(f, t):
	global cnt
	for i in range(f,t,2):
		#print(i)
		if all(map(isprime, map(lambda n: int(''.join(n)), permutations(str(i))))):
			print(i)
			cnt += 1
	return cnt


if __name__ == '__main__':
	cnt = 0
	ranges = [(101, 5*10**5), (5*10**5+1, 7*10**5), (5*10**5+1, 8*10**5), (8*10**5+1, 10**6)]
	threads = [threading.Thread(target=check, args=(i)) for i in ranges]
	
	for i in threads: i.start()
	for i in threads: i.join()

	print('Result:', cnt)
